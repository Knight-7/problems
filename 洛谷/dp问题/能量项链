#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <cstring>
#include <string>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <vector>

using namespace std;
#define IOS                      \
    ios::sync_with_stdio(false); \
    cin.tie(0);                  \
    cout.tie(0)
#define mt(a, b) memset(a, b, sizeof(a));
#define pb push_back
#define pob pop_back
#define mid (l + r) >> 1
#define lson rt << 1
#define rson rt << 1 | 1
#define fi first
#define se second
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

/*
  区间dp
*/
#define inf 10000
ll const maxn = 2000005;
//递推方程 dp[i][j] = max(dp[i][j], dp[i][k] + dp[k + 1][j] + sum[i.j];
int n;
ll dp[250][250];
ll a[250];


int main()
{
    //freopen("text.txt", "r", stdin);
    scanf("%d", &n);
    for (int i = 1; i <= n; i++)
    {
        scanf("%d", &a[i]);
        a[n + i] = a[i];
    }
    ll maxx = 0;
    for (int p = 2; p <= n; p++)
    {
        for (int i = 1; i < 2 * n - p + 1; i++)
        {
            int j = i + p - 1;
            for (int k = i; k < j; k++)
                dp[i][j] = max(dp[i][j], dp[i][k] + dp[k + 1][j] + a[i] * a[k + 1] * a[j + 1]);
        if (maxx < dp[i][j])
            maxx = dp[i][j];
        }
    }
    printf("%lld\n", maxx);
    return 0;
}
