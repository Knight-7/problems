#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <cstring>
#include <string>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <vector>

using namespace std;
#define IOS                      \
    ios::sync_with_stdio(false); \
    cin.tie(0);                  \
    cout.tie(0)
#define mt(a, b) memset(a, b, sizeof(a));
#define pb push_back
#define pob pop_back
#define mid (l + r) >> 1
#define lson rt << 1
#define rson rt << 1 | 1
#define fi first
#define se second
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

/*

*/

ll const maxn = 2000005;
int n, m;
int aa[355];
int num[5];
int dp[41][41][41][41];

int main()
{
    //freopen("text.txt", "r", stdin);
    cin >> n >> m;
    memset(num, 0, sizeof(num));
    memset(dp, 0, sizeof(dp));
    for (int i = 1; i <= n; i++)
        cin >> aa[i];
    for (int i = 1; i <= m; i++)
    {
        int x;
        cin >> x;
        num[x]++;
    }
    dp[0][0][0][0] = aa[1];
    for (int a = 0; a <= num[1]; a++)
        for (int b = 0; b <= num[2]; b++)
            for (int c = 0; c <= num[3]; c++)
                for (int d = 0; d <= num[4]; d++)
                {
                    int p = 1 + a + b * 2 + c * 3 + d * 4;
                    int tmp = aa[p];
                    if (a > 0) dp[a][b][c][d] = max(dp[a][b][c][d], dp[a - 1][b][c][d] + aa[p]);
                    if (b > 0) dp[a][b][c][d] = max(dp[a][b][c][d], dp[a][b - 1][c][d] + aa[p]);
                    if (c > 0) dp[a][b][c][d] = max(dp[a][b][c][d], dp[a][b][c - 1][d] + aa[p]);
                    if (d > 0) dp[a][b][c][d] = max(dp[a][b][c][d], dp[a][b][c][d - 1] + aa[p]);
                }
    cout << dp[num[1]][num[2]][num[3]][num[4]];
    return 0;
}
