#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <cstring>
#include <string>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <vector>

using namespace std;
#define IOS                      \
	ios::sync_with_stdio(false); \
	cin.tie(0);                  \
	cout.tie(0)
#define mt(a, b) memset(a, b, sizeof(a));
#define pb push_back
#define pob pop_back
#define mid (l + r) >> 1
#define lson rt << 1
#define rson rt << 1 | 1
#define fi first
#define se second
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

/*
	codeforce 1157A

*/

ll const maxn = 2000005;

struct node
{
    int l, r;
    node(int lll, int rr)
    {
        l = lll, r = rr;
    }
    bool operator < (const struct node a) const
    {
        if (a.l == l)
            return a.r < r;
        return a.l < l;
    }
};

int main()
{
    //freopen("text.txt", "r", stdin);
	int t;
	scanf("%d", &t);
	while(t--)
    {
        ll l, r;
        int n;
        scanf("%d", &n);
        priority_queue<node> q;
        for (int i = 0; i < n; i++)
        {
            scanf("%lld%lld", &l, &r);
            q.push(node(l, r));
        }
        int m = 0;
        int ans = 0;
        while (!q.empty())
        {
            node now = q.top();
            //printf("%d %d\n", now.l, now.r);
            q.pop();
            if (m < now.l)
            {
                m = now.l;
                ans++;
                while (!q.empty())
                {
                    node k = q.top();
                    if (k.l == now.l)
                    {
                        if (k.l + 1 <= k.r)
                            q.push(node(k.l + 1, k.r));
                    }
                    else
                        break;
                    q.pop();
                }
            }
            else if (m < now.r)
            {
                m++;
                ans++;
                while (!q.empty())
                {
                    node k = q.top();
                    if (k.l == m)
                        q.push(node(k.l + 1, k.r));
                    else
                        break;
                    q.pop();
                }
            }
        }
        printf("%d\n", ans);
    }
    return 0;
}
