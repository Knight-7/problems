#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <cstring>
#include <string>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <list>
#include <vector>

using namespace std;
#define IOS                      \
	ios::sync_with_stdio(false); \
	cin.tie(0);                  \
	cout.tie(0)
#define mt(a, b) memset(a, b, sizeof(a));
#define pb push_back
#define pob pop_back
#define mid (l + r) >> 1
#define lson rt << 1
#define rson rt << 1 | 1
#define fi first
#define se second
typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

/*
  基本思路：将第一次的重点乘以（k-1）之后，那么改点就是最后一次的起点，然后从改点开始找最大值；
  本题的一个坑是：当k很小的时候，最大距离可能是第一次走的时候，所以还要判断是否在第一次走的时候就已经有了最远距离。
*/

ll const maxn = 2000005;
char cmd[100005];

int main()
{
    //freopen("text.txt", "r", stdin);
	int t;
	scanf("%d", &t);
	while(t--)
    {
        int n;
        ll k;
        scanf("%d%lld", &n, &k);
        scanf("%s", cmd);
        ll maxnn = 0, ma = 0;
        ll h = 0, v = 0;
        //ll x = 0, y = 0;
        for (int i = 0; i < n; i++)
        {
            if (cmd[i] == 'U') v += 1;
            else if (cmd[i] == 'D') v -= 1;
            else if (cmd[i] == 'L') h -= 1;
            else h += 1;
            ma = max(ma, abs(v) + abs(h));
        }
        ll x = h * (k - 1);
        ll y = v * (k - 1);
        for (int i = 0; i < n; i++)
        {
            if (cmd[i] == 'U') y += 1;
            else if (cmd[i] == 'D') y -= 1;
            else if (cmd[i] == 'L') x -= 1;
            else x += 1;
            maxnn = max(maxnn, abs(x) + abs(y));
        }
        maxnn = max(maxnn, ma);
        printf("%lld\n", maxnn);
    }
    return 0;
}
